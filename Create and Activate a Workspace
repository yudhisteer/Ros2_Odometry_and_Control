# creatr a workspace (bumperbot_ws) and a src file
mkdir -p bumperbot_ws/src

# to make our workspace executable - will create three work folders: build, install, log + src
# run colcon build when inside workspace
colcon build

# creating package wiwth provided python or C++ scripts
# package name = bumperbot_cpp_examples
# to be created inside "src"
ros2 pkg create --build-type ament_cmake bumperbot_cpp_examples

# creating package wiwth provided python or Python scripts
# package name = bumperbot_py_examples
# to be created inside "src"
ros2 pkg create --build-type ament_python bumperbot_py_examples

# go back to workspace (exit "src")
cd ..
colcon build
# ignore warnings

# we now need to activate our wokspace which means making the bumper bot workspace folder.
# For the latter to be recognized as an overlay for Ros2.
# This way all the packages that we are going to use in this workspace, including the one we just created.
# So the bumper bot examples and the bumper bot py examples will be recognized as Ros two packages.

# Note: Always source the workspace in a different terminal
# open new termina
# cd workspace/install
# we now need to source setup.bash
. setup.bash


# check the available packages
# we will see: bumperbot_py_examples and bumperbot_cpp_examples
ros2 pkg list
# Note: we will only these 2 packages we have created in the terminal where we have run ". setup.bash"
# When openign a new terminal, before using the packages, we need to source the workspace.
# That is, we must source the setup.bash







